= Android向けのGoogle Play Integrity APIは活用できるか？

== この章の概要
スマホアプリ向けプラットフォームには、真正な端末やアプリかどうかを判定するAPIが用意されている、このAPIを活用できるかを考える。

== Play Integrity APIとは
スマホ向けアプリにおいて、改造されたアプリや不正な方法でインストールされたアプリからのアクセスを検知したいケースがあると思います。Apple, Googleなどではそれを検知する方法があるため、今回はそこについて見ていきます。

iOS向けのDeviceCheckのApp Attest API
https://developer.apple.com/documentation/devicecheck
Android向けのPlay Integrity API
https://developer.android.com/google/play/integrity/overview?hl=ja

これらのAPIではアプリが正当なものかどうかを判定してくれます、

 * 正規のアプリのバイナリかどうか、改造されていないか
 * Google Playでアプリをインストールしているか
 * 真正のAndroidデバイスかどうか

== DeviceCheckの2bit値の活用
保存できるのは2bit値なのでid等は保存できないように設計されています。またこの値はアプリを削除しても、デバイスをリセットしても消えないため、活用方法としては例えば以下のようなことが考えられます。

 * このデバイスでは過去に不正判定を行ったか？
 * このデバイスでは過去にフリートライアルを利用したか？

といったことを保存してくことができます。
ただ、この値はアプリ単位ではなくアプリ提供者単位のはずなので、フリートライアル有無の保存はよく考えてから使った方が良いかなと思います。

== 活用できないケース
こういった判定APIを活用できないケースにはどのようなものがあるでしょうか。
これらのAPIの判定結果自体を誤魔化すような不正は一般には困難なので一旦おいておくとして、最も考慮すべきはApple,Google以外の不正判定の仕組みが無いプラットフォームを使う場合です。
何かの方法で不正なアクセスをしてくるユーザーは、Apple,Googleのバイナリの改造をせずとも不正判定の仕組みが無いプラットフォームを使うようにすれば不正判定を回避できます。改造バイナリを使うことが目的ではない場合、これを防ぐことができません。
また、通信の改変のようなアプリの外で行われる事象も今回の判定では防げません。これは別の枠で考える必要があります。

とはいえ、防げる部分はきちんと防いで行くことは重要です。全部素通りにするのではなく、できる対策を積み重ねていきましょう。

== まとめ
抜け道がおそらくあるだろうという前提のもと、活用していくことになりそう。

TODo いい感じのまとめ
