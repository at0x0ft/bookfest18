= DeviceCheck(iOS)やPlay Integrity API(Android)は活用できるか？

== この章の概要
スマホアプリ向けプラットフォームには、真正な端末やアプリかどうかを判定するAPIが用意されているケースがあります、このAPIを活用するにはどうすれば良いか考えていきましょう。

== できること

=== iOS,Androidで似ている部分

スマホ向けアプリにおいて、改造されたアプリや不正な方法でインストールされたアプリからのアクセスを検知したいケースがあると思います。Apple, Googleなどではそれを検知する方法があるため、今回はそこについて見ていきましょう。Apple, Googleにはそれぞれ以下の機能が用意されています。

 * iOS向けのDeviceCheckのApp Attest API@<fn>{endofn01}
 * Android向けのPlay Integrity API@<fn>{endofn02}

//footnote[endofn01][https://developer.apple.com/documentation/devicecheck]
//footnote[endofn02][https://developer.android.com/google/play/integrity/overview?hl=ja]

これらのAPIではアプリや環境が正当なものかどうかを判定してくれます、例えばPlay Integrity APIの場合はこのような内容です。

 * 正規のアプリのバイナリかどうか、改造されていないか
 * Google Playでアプリをインストールしているか
 * 真正のAndroidデバイスかどうか

== 活用できるケース,できないケース

=== 活用できるケース

シンプルにはこれらのAPIによる確認を挟むことである程度の参考になる判定はできるでしょう。アカウント作成時に必ずこのAPIを確認する方法があります。ただ、このAPIを絶対的なものとして扱えるかはある程度検討しておきましょう。判定に対するペナルティが重たい場合には特に注意が必要です。

=== 活用できないケース

こういった判定APIを活用できないケースにはどのようなものがあるでしょうか。
これらのAPIの判定結果自体を誤魔化すような不正は一般には困難なので一旦おいておくとして、いくつか列挙するとこのようなものがあります。

 * 何らかの理由で判定が誤っている場合
 * 判定用APIが一時的に使えない場合
 * Apple,Google以外の(不正判定の仕組みが無い)プラットフォームでもアプリを展開する場合

そもそもが特定のプラットフォームでの対策のため、Apple,Googleのバイナリの改造をせずとも不正判定の仕組みが無いプラットフォームを使うようにすれば不正判定を回避できます。このあたりはどういう目的で改造しているか次第のため、考えなくても良いケースもあるでしょう。

また、アプリの外で行われる不正には別の仕組みが必要です。通信の改変のようなアプリの外で行われる事象も今回の判定では防げません。これは別の枠で考える必要があります。

== iOS DeviceCheckの2bit値の活用

iOSにあるDeviceCheckでは端末単位で2bitまでの値と時刻を保存できます。保存できるのは2bit値なのでid等は保存できないように設計されています。またこの値はアプリを削除してもデバイスをリセットしても消えないため、活用方法としては例えば以下のようなことが考えられます。

 * このデバイスでは過去にインストールしたことがあるか？
 * このデバイスでは過去に不正判定されたことがあるか？

こういった値が活用しやすい値となります。この値を何に使うかは迷うところかと思いますが、日付も取得できるので後で意味を変更することもギリギリ可能でしょう。

== まとめ

このあたりのAPIは抜け道があると考えるというよりも、目的に対して利用できるならば利用したり、他の対策と合わせて検討していきましょう。何か絶対的な対策があるのでは無いため色々な手段を使っていきましょう。

